services:
  # Aplicação Principal
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    environment:
      - FLASK_ENV=production
      - PORT=5001
      - LINKEDIN_CLIENT_ID=${LINKEDIN_CLIENT_ID:-}
      - LINKEDIN_CLIENT_SECRET=${LINKEDIN_CLIENT_SECRET:-}
      - LINKEDIN_REDIRECT_URI=${LINKEDIN_REDIRECT_URI:-https://app.snaplinked.com/auth/linkedin/callback}
      - SECRET_KEY=${SECRET_KEY:-snaplinked-secret-key-production}
      - DATABASE_URL=${DATABASE_URL:-postgresql://snaplinked_user:snaplinked_password@postgres:5432/snaplinked}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
    volumes:
      - ./data:/app/data
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Frontend React/Vite
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    environment:
      - VITE_API_URL=https://api.snaplinked.com
    volumes:
      - ./frontend/dist:/usr/share/nginx/html
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Banco de Dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-snaplinked}
      POSTGRES_USER: ${POSTGRES_USER:-snaplinked_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-snaplinked_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U snaplinked_user -d snaplinked"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para Cache e Sessão
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  default:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
      - snaplinked-app
    restart: unless-stopped

volumes:
  data:
    driver: local
